= Cloud-Native Java Pedagogical Sequence

Outline that expresses a pedagogical sequence for Cloud-Native Java, including Spring Boot and Spring Cloud.

NOTE: Although there is a lot of detail in the beginning sections, most of this document should list *concepts* with applicable links in a logical teaching progression.  Unlike usual technical documentation, avoid use of gerunds in titles to avoid the tendency to describe *processes*.

== Spring foundational concepts
=== Dependency injection
== Spring Boot and related dependencies (e.g. Spring Data JPA)
=== Groovy scripting a REST service
[source,groovy]
.example: hi.groovy
----
@RestController
class GreetingsRestController {
  @RequestMapping("/hi/{name}")
  def hi(@PathVariable String name) {
    [ greeting : "Hi," + name + "!"]
  }
}
----
.Running example from command line
----
> spring run hi.groovy
----
.Invoking example REST service in browser
----
localhost:8080/hi/World
----
.JSON returned from REST service
----
{
  greeting: "Hi,World!"
}
----
.Creating an executable JAR from example
----
> spring jar hi.jar hi.groovy
----
.Running the example executable JAR
----
> java -jar hi.jar
----
The REST web service code above is short enough to be tweeted!

=== Spring Initializer start.spring.io
Some typical choices *Project metadata* section:

* *Type:* Maven Project
* *Packaging:* Jar

TIP: Your choice in *Spring Boot Version* reveals (on the right side of the page) the available features for that version.

Some example choices *Project dependencies* section:

* *Thymeleaf:* TODO: Describe
* *Web:* TODO: Describe
* *Vaadin:* Component-based Web UIs
* *REST Repositories:* Convention over configuration-based APIs based on your data access layer
* *REST Repositories HAL Browser:* To give information about the REST repositories
* *JPA:* Object-Relational Mapping
* *H2:* In-memory embedded database that isn't persistent between app restarts
* *Actuator:* TODO: Describe
* *Remote Shell:* TODO: Describe

Clicking *Generate Project* creates and downloads a ZIP file that can be expanded and opened in an IDE such as Intellij and Eclipse.  The ZIP file contains project-related files and a skeletal directory structure with source code for a minimal project.  If Maven Project was chosen in the *Project metadata* section, a pom.xml file is generated that contains information about the build such as type of build, name, description, and project dependencies.

[source,xml]
.Top section of example pom.xml file
----
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.test</groupId>
	<artifactId>demo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>demo</name>
	<description>Demo project for Spring Boot</description>
----

Common artifacts from the parent's build system may be inherited.  For example, TODO: Explain.

[source,xml]
.*<parent>* section of example pom.xml file
----
<parent>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-parent</artifactId>
  <version>1.3.0.M5</version>
  <relativePath/> <!-- lookup parent from repository -->
</parent>
----

Much of the file consists of dependencies, many of them corresponding to the choices made in the *Project dependencies* portion of the *Spring Initializer* page.  Dependencies specified cause external libraries to be included in the project.  Some dependencies, particular ones that contain the word *starter*, cause other dependencies to be loaded in a cascading fashion.

[source,xml]
.*<dependencies>* section of example pom.xml file
----
<dependencies>
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-actuator</artifactId>
  </dependency>
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
  </dependency>
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-rest</artifactId>
  </dependency>
  <dependency>
    <groupId>org.springframework.data</groupId>
    <artifactId>spring-data-rest-hal-browser</artifactId>
  </dependency>
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-remote-shell</artifactId>
  </dependency>
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-thymeleaf</artifactId>
  </dependency>
  <dependency>
    <groupId>com.vaadin</groupId>
    <artifactId>vaadin-spring-boot-starter</artifactId>
    <version>1.0.0</version>
  </dependency>
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
  </dependency>

  <dependency>
    <groupId>com.h2database</groupId>
    <artifactId>h2</artifactId>
    <scope>runtime</scope>
  </dependency>
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-test</artifactId>
    <scope>test</scope>
  </dependency>
</dependencies>
----

=== Spring Data JPA
==== Entity definition
[source,java]
.Example entity definition:
----
@Entity
public class Reservation {
    @Id
    @GeneratedValue
    private Long id;

    private String reservationName;

    public Reservation() { // required by JPA?
    }

    public Reservation(String reservationName) {
        this.reservationName = reservationName;
    }

    public Long getId() {
        return id;
    }

    public String getReservationName() {
        return reservationName;
    }

    @Override
    public String toString() {
        return "Reservation{" +
            "id=" + id +
            ", reservationName='" + reservationName + '\'' +
            '}';
    }
}
----

==== JpaRepository methods
[source,java]
.In `JpaRepository`:
----
List<T> findAll();
List<T> findAll(Sort var1);
List<T> findAll(Iterable<ID> var1);
<S extends T> List<S> save(Iterable<S> var1);
void flush();
<S extends T> S saveAndFlush(S var1);
void deleteInBatch(Iterable<T> var1);
void deleteAllInBatch();
T getOne(ID var1);
----
.Inherited from `PagingAndSortingRepository`:
----
Iterable<T> findAll(Sort var1);
Page<T> findAll(Pageable var1);
----
.Inherited from `CrudRepository`:
----
<S extends T> S save(S var1);
<S extends T> Iterable<S> save(Iterable<S> var1);
T findOne(ID var1);
boolean exists(ID var1);
Iterable<T> findAll();
Iterable<T> findAll(Iterable<ID> var1);
long count();
void delete(ID var1);
void delete(T var1);
void delete(Iterable<? extends T> var1);
void deleteAll();
----

==== Automatic repository access object instantiation
The Spring Data framework automatically creates objects that implement repository access interfaces required by application code.  All of the repository access interfaces extend the marker interface named `Repository`.

==== Custom finder methods
[source,java]
.Example of creating a custom finder method:
----
interface ReservationRepository extends JpaRepository<Reservation, Long> {
  // select * from reservations where reservation_name = :rn
  Collection<Reservation> findByReservationName (String rn);
}
----

==== Commonly used Annotations specific to Spring Data JPA

* http://docs.spring.io/spring-data/jpa/docs/current/reference/html/[@Entity] A Spring Data JPA annotation that TODO: Describe

* *@Id:* TODO: Provide link or describe
* *@GeneratedValue:* TODO: Provide link or describe

==== Other Spring Data projects
Examples include:

* http://projects.spring.io/spring-data-mongodb/[Spring Data MongoDB]
* http://projects.spring.io/spring-data-rest/[Spring Data REST]
* http://projects.spring.io/spring-data-cassandra/[Spring Data Cassandra]
* http://projects.spring.io/spring-data-neo4j/[Spring Data Neo4J]
* http://projects.spring.io/spring-data-couchbase/[Spring Data Couchbase]
* http://projects.spring.io/spring-data-redis/[Spring Data Redis]

NOTE: Spring Data projects differ in capabilities.  For example, Spring Data Neo4J contains a `GraphRepository` interface that includes methods for finding objects at given depths:

[source,java]
.Methods in `GraphRepository` for finding objects at given depths:
----
Iterable<T> findAll(int depth);
Iterable<T> findAll(Sort sort, int depth);
Iterable<T> findAll(Iterable<Long> ids, int depth);
Iterable<T> findAll(Iterable<Long> ids, Sort sort, int depth);
Page<T> findAll(Pageable pageable, int depth);
----

=== Commonly used Annotations specific to Spring Boot apps

* http://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/autoconfigure/SpringBootApplication.html[@SpringBootApplication] TODO: Describe

== Spring Cloud
== Cloud Foundry
